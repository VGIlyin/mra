 lang -> expr*
 expr -> EXPR_IF_ELSE | EXPR_WHILE | EXPR_ASSIGN
 EXPR_ASSIGN -> VAR ASSIGN_OP VALUE (OP VALUE)*
 VALUE -> VAR | DIGIT | STRING

 EXPR_WHILE -> WHILE L_BRACKET EXPR_PREDICATE R_BRACKET EXEC_BLOCK END
 EXPR_PREDICATE -> BOOL | VALUE | (VALUE CONDITIONAL_OP VALUE)
 VALUE -> VAR | DIGIT | STRING
 EXEC_BLOCK -> expr

 while (a < b)
     a = a + 1
 end

 EXPR_IF_ELSE -> if L_BRACKET EXPR_PREDICATE R_BRACKET EXEC_BLOCK EXPR_ELIF* | EXPR_ELSE{1,0} END
 EXPR_PREDICATE -> BOOL | (VALUE CONDITIONAL_OP VALUE)
 EXEC_BLOCK -> expr

 EXPR_ELIF -> L_BRACKET EXPR_PREDICATE R_BRACKET EXEC_BLOCK EXPR_ELIF* EXPR_ELSE+ END
 EXEC_BLOCK -> expr

 EXPR_ELSE -> ELSE EXEC_BLOCK END

if (a == b)
    a = 0
elif (a < b)
    a = b
else
	b = 0
end
